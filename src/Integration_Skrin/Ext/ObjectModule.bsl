Перем Контекст;

#Область ПрограммныйИнтерфейс

// Приводит скрининг физ. лица через СКРИН API.
//
// Параметры:
//		ФизЛицо				- СправочникСсылка.Контрагенты, Структура - клиент или его описание.
//		ПараметрыПроверки	- структура содержащая описание сессии и параметры проверки
//
// Возвращаемое значение:
//    	Структура			- описание сессии и результаты проверок. 
//
Функция ПровестиСкринингФизЛица(ФизЛицо, ПараметрыПроверки) Экспорт 
	
	ПараметрыВAPIСкрин = СериализоватьВходящиеПараметры(ФизЛицо, ПараметрыПроверки);	
	
	Результат = Новый Структура;	
	
	Если ПараметрыПроверки.Свойство("ПроверитьПаспортПоБазеМВД")
		И ПараметрыПроверки.ПроверитьПаспортПоБазеМВД Тогда
		Результат.Вставить("РезультатПроверкиПаспортаПоБазеМВД", CheckPassport(ПараметрыВAPIСкрин.ИДСессии, ПараметрыВAPIСкрин.ПроверитьПаспортПоБазеМВД.СерияНомерПаспорта));		
	КонецЕсли;
	
	Если ПараметрыПроверки.Свойство("ПроверитьПаспортПоБазеМВДОнлайн")
		И ПараметрыПроверки.ПроверитьПаспортПоБазеМВДОнлайн Тогда 
		Результат.Вставить("РезультатПроверкиПаспортаПоБазеМВДОнлайн", CheckPassportMVD(ПараметрыВAPIСкрин.ИДСессии, ПараметрыВAPIСкрин.ПроверитьПаспортПоБазеМВД.СерияНомерПаспорта));		
	КонецЕсли;
	
	Если ПараметрыПроверки.Свойство("ПолученитьИННОтНалоговой")
		И ПараметрыПроверки.ПолученитьИННОтНалоговой Тогда 
		Результат.Вставить("РезультатПолученныйИННОтНалоговой", GetInnFl(ПараметрыВAPIСкрин.ИДСессии
																			, ПараметрыВAPIСкрин.ПолученитьИННОтНалоговой.Фамилия
																			, ПараметрыВAPIСкрин.ПолученитьИННОтНалоговой.Имя
																			, ПараметрыВAPIСкрин.ПолученитьИННОтНалоговой.Отчество
																			, ПараметрыВAPIСкрин.ПолученитьИННОтНалоговой.ДатаРождения
																			, ПараметрыВAPIСкрин.ПолученитьИННОтНалоговой.ТипДокументаПолучениеИНН
																			, ПараметрыВAPIСкрин.ПолученитьИННОтНалоговой.НомерДокументаПолучениеИНН
																			, ПараметрыВAPIСкрин.ПолученитьИННОтНалоговой.ДатаДокументаПолучениеИНН));
	КонецЕсли;
	
	Если ПараметрыПроверки.Свойство("ПроверитьПринадлежностьКПДЛ")
		И ПараметрыПроверки.ПроверитьПринадлежностьКПДЛ Тогда
		Результат.Вставить("РезультатПроверкиПринадлежностиКПДЛ", PublPersons(ПараметрыВAPIСкрин.ИДСессии, ПараметрыВAPIСкрин.ПроверитьПринадлежностьКПДЛ.ФИО, ПараметрыВAPIСкрин.ПроверитьПринадлежностьКПДЛ.ИНН));		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ServiceAuthorization() Экспорт 
	
	ИнициализироватьКонтекст();
	ВыполнитьServiceAuthorization();
	
	Возврат Контекст.ИДСессии;
	
КонецФункции

Функция PublPersons(ИДСессии, ФИО, ИНН = "") Экспорт
	
	Если Не ЗначениеЗаполнено(ФИО) Тогда 
		ВызватьИсключение("Параметр ФИО обязательно должен быть заполнен для метода PublPersons");
	КонецЕсли;
	
	ИнициализироватьКонтекст(ИДСессии);
	ВыполнитьServiceAuthorization();
	ИнфоПДЛ = ВыполнитьPublPersons(ФИО, ИНН);
	
	Возврат Новый Структура("ИДСессии, ИнфоПДЛ", Контекст.ИДСессии, ИнфоПДЛ);
	
КонецФункции

Функция CheckPassport(ИДСессии, СерияНомерПаспорта) Экспорт
	
	Если Не ЗначениеЗаполнено(СерияНомерПаспорта) Тогда 
		ВызватьИсключение("Параметр СерияНомерПаспорта обязательно должен быть заполнен для метода CheckPassport");
	КонецЕсли;
	
	ИнициализироватьКонтекст(ИДСессии);
	ВыполнитьServiceAuthorization();
	ИнфоПаспорт = ВыполнитьCheckPassport(СерияНомерПаспорта);
	
	Возврат Новый Структура("ИДСессии, ИнфоПаспорт", Контекст.ИДСессии, ИнфоПаспорт);
	
КонецФункции

Функция CheckPassportMVD(ИДСессии, СерияНомерПаспорта) Экспорт
	
	Если Не ЗначениеЗаполнено(СерияНомерПаспорта) Тогда 
		ВызватьИсключение("Параметр СерияНомерПаспорта обязательно должен быть заполнен для метода CheckPassportMVD");
	КонецЕсли;
	
	ИнициализироватьКонтекст(ИДСессии);
	ВыполнитьServiceAuthorization();
	ИнфоПаспорт = ВыполнитьCheckPassportMVD(СерияНомерПаспорта);
	
	Возврат Новый Структура("ИДСессии, ИнфоПаспорт", Контекст.ИДСессии, ИнфоПаспорт);

	
КонецФункции

Функция GetInnFl(ИДСессии, Фамилия, Имя, Отчество, ДатаРождения, ТипДокумента, НомерДокумента, ДатаДокумента) Экспорт
	
	МассивОшибок = Новый Массив;
	Если Не ЗначениеЗаполнено(Фамилия) Тогда 
		МассивОшибок.Добавить("Параметр Фамилия обязательно должен быть заполнен для метода GetInnFl");
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Имя) Тогда 
		МассивОшибок.Добавить("Параметр Имя обязательно должен быть заполнен для метода GetInnFl");
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ДатаРождения) Тогда 
		МассивОшибок.Добавить("Параметр Дата рождения обязательно должен быть заполнен для метода GetInnFl");
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ТипДокумента) Тогда 
		МассивОшибок.Добавить("Параметр Тип документа рождения обязательно должен быть заполнен для метода GetInnFl");
	КонецЕсли;
	Если Не ЗначениеЗаполнено(НомерДокумента) Тогда 
		МассивОшибок.Добавить("Параметр Номер документа рождения обязательно должен быть заполнен для метода GetInnFl");
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ДатаДокумента) Тогда 
		МассивОшибок.Добавить("Параметр Дата документа рождения обязательно должен быть заполнен для метода GetInnFl");
	КонецЕсли;
	Если МассивОшибок.Количество() > 0 Тогда 
		ВызватьИсключение(СтрСоединить(МассивОшибок, Символы.ПС));
	КонецЕсли;

	
	ИнициализироватьКонтекст(ИДСессии);
	ВыполнитьServiceAuthorization();
	ИнфоИНН = ВыполнитьGetInnFl(Фамилия, Имя, Отчество, ДатаРождения, ТипДокумента, НомерДокумента, ДатаДокумента);
	
	Возврат Новый Структура("ИДСессии, ИнфоИНН", Контекст.ИДСессии, ИнфоИНН);
	
КонецФункции

Процедура ServiceExit(ИДСессии) Экспорт 
	
	ИнициализироватьКонтекст(ИДСессии);
	ВыполнитьServiceExit();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ИнициализацияКонтекста

Процедура  ИнициализироватьКонтекст(ИДСессии = Неопределено)
	
	Если Контекст = Неопределено Тогда 
		Контекст = Новый Структура;
	КонецЕсли;

	Если НЕ Контекст.Свойство("АдресWSDL") Тогда 
		
		ИнициализироватьПараметрыПодключения();
		ИнициализироватьWSDL();
		ИнициализироватьWSОпределение();
		ИнициализироватьСервисы();
		ИнициализироватьПространствоИмен();
		ИнициализироватьИмяТочкиПодключения();
		ИнициализироватьНаборМетодовСервиса();
		ИнициализироватьWSПрокси();
		
		ИнициализироватьОтветыВебСервиса();	
		ИнициализироватьКонстанты(ИДСессии);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ИнициализироватьПараметрыПодключения();
	
	Контекст.Вставить("ЛогинWS",  "todo_enter_your_login");
	Контекст.Вставить("ПарольWS", "todo_enter_your_password");
	
КонецПроцедуры

Процедура ИнициализироватьWSDL()
	
	Контекст.Вставить("АдресWSDL", "http://api.skrin.ru/ApiSkrin.svc?singleWsdl");	
	
КонецПроцедуры

Процедура ИнициализироватьWSОпределение();
	
	//SSL = Новый ЗащищенноеСоединениеOpenSSL(Неопределено, Новый СертификатыУдостоверяющихЦентровWindows());
	
	Контекст.Вставить("WebService", Новый Структура("WSОпределение", Новый WSОпределения(Контекст.АдресWSDL)));//, , , , ,SSL)));
	
КонецПроцедуры

Процедура ИнициализироватьСервисы()
	
	Контекст.WebService.Вставить("Сервисы", Новый Структура);
	
	Попытка
		Для Каждого Сервис Из Контекст.WebService.WSОпределение.Сервисы Цикл  
			Контекст.WebService.Сервисы.Вставить(Сервис.Имя, Новый Структура("Сервис, URIПространстваИмен, ТочкиПодключения", Сервис, "", Новый Структура()));
		КонецЦикла;
	Исключение
		ВызватьИсключение("Ошибка при получении сервисов из WSDL");
	КонецПопытки;
		
	
КонецПроцедуры

Процедура ИнициализироватьПространствоИмен()
	
	Попытка
		Для Каждого Сервис Из Контекст.WebService.WSОпределение.Сервисы Цикл  
			Контекст.WebService.Сервисы[Сервис.Имя].URIПространстваИмен = Сервис.URIПространстваИмен;
		КонецЦикла;
	Исключение
		ВызватьИсключение("Ошибка при получении пространства имен из WSDL");
	КонецПопытки;
	
	
КонецПроцедуры

Процедура ИнициализироватьИмяТочкиПодключения()
	
	Попытка
		Для Каждого ОписаниеСервиса Из Контекст.WebService.Сервисы Цикл
			ТочкиПодключенияСервиса = Новый Структура;
			Для Каждого ТочкаПодключения Из  ОписаниеСервиса.Значение.Сервис.ТочкиПодключения Цикл 
				ОписаниеСервиса.Значение.ТочкиПодключения.Вставить(ТочкаПодключения.Имя, Новый Структура("Имя, ТочкаПодключения, Операции", ТочкаПодключения.Имя, ТочкаПодключения, Новый Структура()));
			КонецЦикла;
		КонецЦикла;
	Исключение
		ВызватьИсключение("Ошибка при получении точек подключения из WSDL");
	КонецПопытки;
		
КонецПроцедуры

Процедура ИнициализироватьНаборМетодовСервиса()
	
	НаборОпераций = Новый Структура();
		
	Попытка
		Для Каждого ОписаниеСервиса Из Контекст.WebService.Сервисы Цикл
			ТочкиПодключенияСервиса = Новый Структура;
			Для Каждого ОписаниеТочкиПодключения Из ОписаниеСервиса.Значение.ТочкиПодключения Цикл 
				Для Каждого Операция Из ОписаниеТочкиПодключения.Значение.ТочкаПодключения.Интерфейс.Операции Цикл 
					ОписаниеТочкиПодключения.Значение.Операции.Вставить(Операция.Имя, Новый Структура("Имя, Операция, Параметры", Операция.Имя, Операция, Новый Структура())); 																						
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	Исключение
		ВызватьИсключение("Ошибка при получении операций из WSDL");
	КонецПопытки;
			
КонецПроцедуры

Процедура ИнициализироватьWSПрокси()
	
	//SSL 							= Новый ЗащищенноеСоединениеOpenSSL(Неопределено, Новый СертификатыУдостоверяющихЦентровWindows());
	
	Для Каждого Сервис Из Контекст.WebService.Сервисы Цикл  
		Для Каждого ТочкаПодключения Из Сервис.Значение.ТочкиПодключения Цикл
			WSПрокси 						= Новый WSПрокси(Контекст.WebService.WSОпределение, Сервис.Значение.URIПространстваИмен
																, Сервис.Значение.Сервис.Имя, ТочкаПодключения.Значение.ТочкаПодключения.Имя
																, , 60);//, SSL);
			
			WSПрокси.Пользователь			= Контекст.ЛогинWS; 										
			WSПрокси.Пароль					= Контекст.ПарольWS;	
			
			ТочкаПодключения.Значение.Вставить("WSПрокси", WSПрокси);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура ИнициализироватьОтветыВебСервиса()
	
	СоответствиеОтветов = Новый Соответствие;
	//СоответствиеОтветов.Вставить(-1, "Неверный логин или пароль.");	
	
	Контекст.Вставить("ОписаниеОшибокWS", СоответствиеОтветов);
	
КонецПроцедуры

Процедура ИнициализироватьКонстанты(ИДСессии)
	
	Если ЗначениеЗаполнено(ИДСессии) Тогда 															
		Контекст.Вставить("ИДСессии", ИДСессии);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработкаВызоваВебСервиса

Процедура ВыполнитьServiceAuthorization()
		
	Если НЕ Контекст.Свойство("ИДСессии") Тогда 
		
		BasicHttpBinding_IApiSkrin 		= Контекст.WebService.Сервисы.ApiSkrin.ТочкиПодключения.BasicHttpBinding_IApiSkrin;	
		
		ТипWSInput 						= ПолучитьТипWSПараметраПоИмени(BasicHttpBinding_IApiSkrin.WSПрокси, "ServiceAuthorization");
		Input 							= СоздатьПараметрСПолямиИмяПароль(BasicHttpBinding_IApiSkrin.WSПрокси, ТипWSInput);	
		ИДСессии 					= ВыполнитьМетодВебСервиса(BasicHttpBinding_IApiSkrin.WSПрокси, "ServiceAuthorization", Новый Структура("WSПараметр, WSПараметр1", Input.Login, Input.Password)
																	, Истина);				
																	
		Если ЗначениеЗаполнено(ИДСессии) Тогда 															
			Контекст.Вставить("ИДСессии", ИДСессии);
		КонецЕсли;
		
				
	КонецЕсли;
	
КонецПроцедуры

Функция ВыполнитьPublPersons(ФИО, ИНН)
		
	Если Контекст.Свойство("ИДСессии") Тогда 
		
		Попытка
			BasicHttpBinding_IApiSkrin 		= Контекст.WebService.Сервисы.ApiSkrin.ТочкиПодключения.BasicHttpBinding_IApiSkrin;	
			
			Результат = ВыполнитьМетодВебСервиса(BasicHttpBinding_IApiSkrin.WSПрокси, "PublPersons", Новый Структура("WSПараметр, WSПараметр1, WSПараметр2, WSПараметр3", Контекст.ИДСессии, ФИО, ИНН, False), Истина);				
					
			Если Результат.Errors.Error.Количество() = 0
				И Результат.Data <> Неопределено
				И Результат.Data.PublPerson.Количество() > 0 Тогда 
				ЭтоПДЛ 			= Истина;
				ОписаниеОшибки 	= "";
			ИначеЕсли Результат.Errors.Error.Количество() = 0
				И Результат.Data = Неопределено Тогда 
				ЭтоПДЛ 			= Ложь;
				ОписаниеОшибки 	= "";
			ИначеЕсли Результат.Errors.Error.Количество() > 0 Тогда 
				ЭтоПДЛ 			= Неопределено;
				МассивСтрок		= Новый Массив;
				Для Каждого Error Из Результат.Errors.Error Цикл 
					МассивСтрок.Добавить(Error.ErrorMessage);				
				КонецЦикла;
				ОписаниеОшибки	= СтрСоединить(МассивСтрок, Символы.ПС);
			Иначе
				ЭтоПДЛ 			= Неопределено;
				ОписаниеОшибки 	= Неопределено;
			КонецЕсли;
		Исключение
			ЭтоПДЛ 			= Неопределено;
			ОписаниеОшибки 	= ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		КонецПопытки;
	
		Возврат Новый Структура("ЭтоПДЛ, ОписаниеОшибки", ЭтоПДЛ, ОписаниеОшибки);
		
	КонецЕсли;
	
КонецФункции

Функция ВыполнитьCheckPassport(СерияНомерПаспорта)
		
	Если Контекст.Свойство("ИДСессии") Тогда 
		
		Попытка
			BasicHttpBinding_IApiSkrin 		= Контекст.WebService.Сервисы.ApiSkrin.ТочкиПодключения.BasicHttpBinding_IApiSkrin;	
			
			Результат = ВыполнитьМетодВебСервиса(BasicHttpBinding_IApiSkrin.WSПрокси, "CheckPassport", Новый Структура("WSПараметр, WSПараметр1", Контекст.ИДСессии, СерияНомерПаспорта), Истина);				
					
			Если Результат.Errors.Error.Количество() = 0
				И ТипЗнч(Результат.Data) = Тип("Число") Тогда 
				ПаспортНедействителен			= Булево(Результат.Data);
				Если Результат.Data = 0 Тогда 
					РасширенныйОтвет			= "Паспорт физического лица - гражданина РФ отсутствует в списке недействительных (утраченных (похищенных), оформленных на утраченных (похищенных) бланках паспорта гражданина Российской федерации, выданных в нарушении установленного порядка, а также признанных недействительными) паспортов граждан Российской Федерации, удостоверяющих личность гражданина Российской Федерации на территории Российской Федерации.";
				ИначеЕсли Результат.Data = 1 Тогда 
					РасширенныйОтвет			= "Паспорт физического лица - гражданина РФ присутствует в списке недействительных (утраченных (похищенных), оформленных на утраченных (похищенных) бланках паспорта гражданина Российской федерации, выданных в нарушении установленного порядка, а также признанных недействительными) паспортов граждан Российской Федерации, удостоверяющих личность гражданина Российской Федерации на территории Российской Федерации.";
				ИначеЕсли Результат.Data = 2 Тогда 
					РасширенныйОтвет			= "Строка с номером паспорта имеет неверный формат.";
				КонецЕсли;
				ОписаниеОшибки 					= "";
			ИначеЕсли Результат.Errors.Error.Количество() > 0 Тогда 
				ПаспортНедействителен 			= Неопределено;
				РасширенныйОтвет				= Неопределено;
				МассивСтрок						= Новый Массив;
				Для Каждого Error Из Результат.Errors.Error Цикл 
					МассивСтрок.Добавить(Error.ErrorMessage);				
				КонецЦикла;
				ОписаниеОшибки	= СтрСоединить(МассивСтрок, Символы.ПС);
			Иначе
				ПаспортНедействителен 		= Неопределено;
				РасширенныйОтвет			= Неопределено;
				ОписаниеОшибки 				= Неопределено;
			КонецЕсли;
		Исключение
			ПаспортНедействителен 		= Неопределено;
			РасширенныйОтвет			= Неопределено;
			ОписаниеОшибки 				= ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		КонецПопытки;
	
		Возврат Новый Структура("ПаспортНедействителен, РасширенныйОтвет, ОписаниеОшибки", ПаспортНедействителен, РасширенныйОтвет, ОписаниеОшибки);
		
	КонецЕсли;
	
КонецФункции

Функция ВыполнитьCheckPassportMVD(СерияНомерПаспорта)
		
	Если Контекст.Свойство("ИДСессии") Тогда 
		
		Попытка
			сч = 0;
			BasicHttpBinding_IApiSkrin 		= Контекст.WebService.Сервисы.ApiSkrin.ТочкиПодключения.BasicHttpBinding_IApiSkrin;	
			
			Результат = ВыполнитьМетодВебСервиса(BasicHttpBinding_IApiSkrin.WSПрокси, "CheckPassportMVD", Новый Структура("WSПараметр, WSПараметр1", Контекст.ИДСессии, СерияНомерПаспорта), Истина);				
					
			Пока Результат.QueueStatus = 0
				И сч <= 10
				И Результат.Errors.Error.Количество() = 0 Цикл
				СделатьПаузу(15);
				Результат = ВыполнитьМетодВебСервиса(BasicHttpBinding_IApiSkrin.WSПрокси, "CheckPassportMVD", Новый Структура("WSПараметр, WSПараметр1", Контекст.ИДСессии, СерияНомерПаспорта), Истина);				
				сч = сч + 1;
			КонецЦикла;
				
			Если Результат.Errors.Error.Количество() = 0
				И ЗначениеЗаполнено(Результат.Data) Тогда 
				Если СтрНайти(Результат.Data, "Cреди недействительных не значится") > 0 Тогда 
					ПаспортНедействителен		= Ложь;
				Иначе 
					ПаспортНедействителен		= Истина;
				КонецЕсли;	
				РасширенныйОтвет				= Результат.Data;
				ОписаниеОшибки 					= "";
			ИначеЕсли Результат.Errors.Error.Количество() > 0 Тогда 
				ПаспортНедействителен 			= Неопределено;
				РасширенныйОтвет				= Неопределено;
				МассивСтрок						= Новый Массив;
				Для Каждого Error Из Результат.Errors.Error Цикл 
					МассивСтрок.Добавить(Error.ErrorMessage);				
				КонецЦикла;
				ОписаниеОшибки	= СтрСоединить(МассивСтрок, Символы.ПС);
			Иначе
				ПаспортНедействителен 		= Неопределено;
				РасширенныйОтвет			= Неопределено;
				ОписаниеОшибки 				= Неопределено;
			КонецЕсли;
		Исключение
				ПаспортНедействителен 		= Неопределено;
				РасширенныйОтвет			= Неопределено;
				ОписаниеОшибки 				= ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());			
		КонецПопытки;
	
		Возврат Новый Структура("ПаспортНедействителен, РасширенныйОтвет, ОписаниеОшибки", ПаспортНедействителен, РасширенныйОтвет, ОписаниеОшибки);
		
	КонецЕсли;
	
КонецФункции

Функция ВыполнитьGetInnFl(Фамилия, Имя, Отчество, ДатаРождения, ТипДокумента, НомерДокумента, ДатаДокумента)
		
	Если Контекст.Свойство("ИДСессии") Тогда 
		
		Попытка
			сч = 0;
			BasicHttpBinding_IApiSkrin 		= Контекст.WebService.Сервисы.ApiSkrin.ТочкиПодключения.BasicHttpBinding_IApiSkrin;	
			
			Результат = ВыполнитьМетодВебСервиса(BasicHttpBinding_IApiSkrin.WSПрокси, "GetInnFl", Новый Структура("WSПараметр, WSПараметр1, WSПараметр2, WSПараметр3, WSПараметр4, WSПараметр5, WSПараметр6, WSПараметр7", Контекст.ИДСессии, Фамилия, Имя, Отчество, Формат(ДатаРождения, "ДФ=dd.MM.yyyy"), Строка(ТипДокумента), НомерДокумента, Формат(ДатаДокумента, "ДФ=dd.MM.yyyy")), Истина);				
					
			Пока Результат.QueueStatus = 0
				И сч <= 10 Цикл
				СделатьПаузу(15);
				Результат = ВыполнитьМетодВебСервиса(BasicHttpBinding_IApiSkrin.WSПрокси, "GetInnFl", Новый Структура("WSПараметр, WSПараметр1, WSПараметр2, WSПараметр3, WSПараметр4, WSПараметр5, WSПараметр6, WSПараметр7", Контекст.ИДСессии, Фамилия, Имя, Отчество, Формат(ДатаРождения, "ДФ=dd.MM.yyyy"), Строка(ТипДокумента), НомерДокумента, Формат(ДатаДокумента, "ДФ=dd.MM.yyyy")), Истина);				
				сч = сч + 1;
			КонецЦикла;
				
			Если Результат.Errors.Error.Количество() = 0
				И ТипЗнч(Результат.Data) = Тип("ОбъектXDTO") Тогда 
				РезультатПоискаЧисло = Результат.Data.Code;
				Если Результат.Data.Code = "0"  Тогда 
					РезультатПоиска = "ИНН не найден";	
					ИНН				= Неопределено;
				ИначеЕсли Результат.Data.Code = "1"  Тогда 
					РезультатПоиска = "ИНН найден";	
					ИНН				= Результат.Data.INN;
				ИначеЕсли Результат.Data.Code = "2"  Тогда 
					РезультатПоиска = "Ошибка поиска ИНН";	
					ИНН				= Неопределено;
				КонецЕсли;	
				ОписаниеОшибки 	= Результат.Data.Error;
			ИначеЕсли Результат.Errors.Error.Количество() > 0 Тогда 
				РезультатПоискаЧисло= Неопределено;
				РезультатПоиска		= Неопределено;
				ИНН 				= Неопределено;
				МассивСтрок						= Новый Массив;
				Для Каждого Error Из Результат.Errors.Error Цикл 
					МассивСтрок.Добавить(Error.ErrorMessage);				
				КонецЦикла;
				ОписаниеОшибки	= СтрСоединить(МассивСтрок, Символы.ПС);
			Иначе
				РезультатПоискаЧисло= Неопределено;
				РезультатПоиска		= Неопределено;
				ИНН 				= Неопределено;
				ОписаниеОшибки 		= Неопределено;
			КонецЕсли;
		Исключение
				РезультатПоискаЧисло= Неопределено;
				РезультатПоиска		= Неопределено;
				ИНН 				= Неопределено;
				ОписаниеОшибки 		= ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());			
		КонецПопытки;
	
		Возврат Новый Структура("РезультатПоискаЧисло, РезультатПоиска, ИНН, ОписаниеОшибки", РезультатПоискаЧисло, РезультатПоиска, ИНН, ОписаниеОшибки);
		
	КонецЕсли;
	
КонецФункции

Процедура ВыполнитьServiceExit()
		
	Если Контекст.Свойство("ИДСессии") Тогда 
		
		BasicHttpBinding_IApiSkrin 		= Контекст.WebService.Сервисы.ApiSkrin.ТочкиПодключения.BasicHttpBinding_IApiSkrin;	
		
		ВыполнитьМетодВебСервиса(BasicHttpBinding_IApiSkrin.WSПрокси, "ServiceExit", Новый Структура("WSПараметр", Контекст.ИДСессии), Ложь);				
																	
		Контекст.Удалить("ИДСессии");				
	КонецЕсли;
	
КонецПроцедуры

Функция ВыполнитьМетодВебСервиса(Знач WSПрокси, Знач ИмяМетода, Знач СтруктураПараметров
									, Знач ЭтоФункция)
	
	ФатальнаяОшибка = Ложь;
	Результат 		= Неопределено;
	СписокПараметров= "";
	WSПараметр		= Неопределено; 
	WSПараметр1		= Неопределено; 
	WSПараметр2		= Неопределено; 
	WSПараметр3		= Неопределено; 
	WSПараметр4		= Неопределено; 
	WSПараметр5		= Неопределено; 
	WSПараметр6		= Неопределено; 
	WSПараметр7		= Неопределено; 
	WSПараметр8		= Неопределено; 
	WSПараметр9		= Неопределено; 
	WSПараметр10	= Неопределено; 
	WSПараметр11	= Неопределено; 
	WSПараметр12	= Неопределено; 
	WSПараметр13	= Неопределено; 
	WSПараметр14	= Неопределено; 
	WSПараметр15	= Неопределено; 
	
	//создание переменных
	Попытка
		Для Каждого КлючИЗначение Из СтруктураПараметров Цикл 
			СтрокаКода 			= СтрШаблон("%1 = СтруктураПараметров.%2", КлючИЗначение.Ключ, КлючИЗначение.Ключ); 
			СписокПараметров    = СтрШаблон("%1%2%3", СписокПараметров, ?(ЗначениеЗаполнено(СписокПараметров), ", " , ""), КлючИЗначение.Ключ);
			Выполнить(СтрокаКода);	
		КонецЦикла;
	Исключение
		ТекстОшибки = СтрШаблон("Ошибка при создании параметров веб-сервиса %1
									|Информация для технической поддержки:
									|%2", ИмяМетода, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));	
		ФатальнаяОшибка = Истина;	
		СообщитьОбОшибке(ТекстОшибки, ФатальнаяОшибка);
	КонецПопытки;
	
	//создание строки кода
	
	СтрокаКода 		= СтрШаблон("Результат = WSПрокси.%1(%2)", ИмяМетода, СписокПараметров);
	Если НЕ ЭтоФункция Тогда 
		СтрокаКода = СтрЗаменить(СтрокаКода, "Результат = ", ""); 	
	КонецЕсли;
	
	Попытка
		Выполнить(СтрокаКода);
	Исключение
		ТекстОшибки = СтрШаблон("Ошибка при выполнении операции веб-сервиса %1
						|Информация для технической поддержки:
						|%2", ИмяМетода, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));	
		СообщитьОбОшибке(ТекстОшибки, ФатальнаяОшибка);
	КонецПопытки;
	
	Возврат Результат;	
	
КонецФункции

Процедура СделатьПаузу(ЗадержкаСекунд)
	
	КомандаWindows = "Timeout /T " + Формат(ЗадержкаСекунд, "ЧГ=0") + " /NoBreak";
	
	WshShell = Новый COMОбъект("WScript.Shell"); 
	WshShell.Run(КомандаWindows, 0, -1);
	
КонецПроцедуры

#КонецОбласти

#Область СериализацияДесериализацияДанных

Функция СериализоватьВходящиеПараметры(ФизЛицо, ПараметрыПроверки)

	Если ТипЗнч(ФизЛицо) <> Тип("СправочникСсылка.Контрагенты")  
		И ТипЗнч(ФизЛицо) <> Тип("Структура") Тогда  
		ВызватьИсключение(СтрШаблон("Параметр с типом %1 НЕ поддерживается", ТипЗнч(ФизЛицо)));
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	
	//заполнить обязательный параметр userID 
	Если ПараметрыПроверки.Свойство("ИДСессии") 
		И ТипЗнч(ПараметрыПроверки.ИДСессии) = Тип("Строка") Тогда 
		СтруктураПараметров.Вставить("ИДСессии", ПараметрыПроверки.ИДСессии);
	Иначе 
		СтруктураПараметров.Вставить("ИДСессии", "");
	КонецЕсли;
	
	//в зависимости от параметров проверки заполним параметры запросов в СКРИН
	Если ПараметрыПроверки.Свойство("ПроверитьПаспортПоБазеМВД")
		И ПараметрыПроверки.ПроверитьПаспортПоБазеМВД Тогда 
		Если ТипЗнч(ФизЛицо) = Тип("Структура")	
			И ФизЛицо.Свойство("СерияНомерПаспорта") Тогда 
			СерияНомерПаспорта = ФизЛицо.СерияНомерПаспорта;	
		ИначеЕсли ТипЗнч(ФизЛицо) = Тип("СправочникСсылка.Контрагенты") Тогда  
			СерияНомерПаспорта = ПолучитьСерияНомерПаспортаФизЛица(ФизЛицо);
		Иначе 
			СерияНомерПаспорта = "";		
		КонецЕсли;
		СтруктураПараметров.Вставить("ПроверитьПаспортПоБазеМВД", Новый Структура("СерияНомерПаспорта", СерияНомерПаспорта));
	КонецЕсли;
	
	Если ПараметрыПроверки.Свойство("ПроверитьПаспортПоБазеМВДОнлайн")
		И ПараметрыПроверки.ПроверитьПаспортПоБазеМВДОнлайн Тогда 
		Если ТипЗнч(ФизЛицо) = Тип("Структура")	
			И ФизЛицо.Свойство("СерияНомерПаспорта") Тогда 
			СерияНомерПаспорта = ФизЛицо.СерияНомерПаспорта;	
		ИначеЕсли ТипЗнч(ФизЛицо) = Тип("СправочникСсылка.Контрагенты") Тогда  
			СерияНомерПаспорта = ПолучитьСерияНомерПаспортаФизЛица(ФизЛицо);
		Иначе 
			СерияНомерПаспорта = "";		
		КонецЕсли;
		СтруктураПараметров.Вставить("ПроверитьПаспортПоБазеМВДОнлайн", Новый Структура("СерияНомерПаспорта", СерияНомерПаспорта));
	КонецЕсли;

	Если ПараметрыПроверки.Свойство("ПолученитьИННОтНалоговой")
		И ПараметрыПроверки.ПолученитьИННОтНалоговой Тогда
		//docType	string	Код типа документа
		//21 - Паспорт гражданина Российской Федерации
		//01 - Паспорт гражданина СССР
		//03 - Свидетельство о рождении
		//10 - Паспорт иностранного гражданина
		//15 - Разрешение на временное проживание в Российской Федерации
		//19 - Свидетельство о предоставлении временного убежища на территории Российской Федерации
		//23 - Свидетельство о рождении, выданное уполномоченным органом иностранного государства
		//62 - Вид на жительство иностранного гражданина
		
		Если ТипЗнч(ФизЛицо) = Тип("Структура")	
			И ФизЛицо.Свойство("Фамилия")	
			И ФизЛицо.Свойство("Имя")	
			И ФизЛицо.Свойство("Отчество")	
			И ФизЛицо.Свойство("ДатаРождения")	
			И ФизЛицо.Свойство("ТипДокументаПолучениеИНН") 
			И ФизЛицо.Свойство("НомерДокументаПолучениеИНН") 
			И ФизЛицо.Свойство("ДатаДокументаПолучениеИНН") Тогда 
			Фамилия			= ФизЛицо.Фамилия;
			Имя				= ФизЛицо.Имя;
			Отчество		= ФизЛицо.Отчество;
			ДатаРождения	= ФизЛицо.ДатаРождения;
			ТипДокумента	= ФизЛицо.ТипДокументаПолучениеИНН; 
			НомерДокумента	= ФизЛицо.НомерДокументаПолучениеИНН;
			ДатаДокумента	= ФизЛицо.ДатаДокументаПолучениеИНН;	
		ИначеЕсли ТипЗнч(ФизЛицо) = Тип("СправочникСсылка.Контрагенты") Тогда  
			ДанныеФизЛицаДляПолученияИНН 	= ПолучитьДанныеФизЛица(ФизЛицо);
			ДанныеДокументаДляПолученияИНН 	= ПолучитьДанныеДокументаДляПолученияИНН(ФизЛицо);			
			Фамилия			= ДанныеФизЛицаДляПолученияИНН.Фамилия;
			Имя				= ДанныеФизЛицаДляПолученияИНН.Имя;
			Отчество		= ДанныеФизЛицаДляПолученияИНН.Отчество;
			ДатаРождения	= ДанныеФизЛицаДляПолученияИНН.ДатаРождения;
			ТипДокумента	= ДанныеДокументаДляПолученияИНН.Документ; 
			НомерДокумента	= ДанныеДокументаДляПолученияИНН.Номер;
			ДатаДокумента	= ДанныеДокументаДляПолученияИНН.ДатаВыдачи;	
		Иначе 
			Фамилия			= "";
			Имя				= "";
			Отчество		= "";
			ДатаРождения	= '00010101';
			ТипДокумента	= "00"; 
			НомерДокумента	= "";
			ДатаДокумента	= '00010101';		
		КонецЕсли;		
		
		СтруктураПараметров.Вставить("ПолученитьИННОтНалоговой", Новый Структура("Фамилия, Имя, Отчество, ДатаРождения, ТипДокументаПолучениеИНН, НомерДокументаПолучениеИНН, ДатаДокументаПолучениеИНН"
																					, Фамилия, Имя, Отчество, ДатаРождения, ТипДокумента, НомерДокумента, ДатаДокумента));
	КонецЕсли;
	
	
	Если ПараметрыПроверки.Свойство("ПроверитьПринадлежностьКПДЛ")
		И ПараметрыПроверки.ПроверитьПринадлежностьКПДЛ Тогда 
		Если ТипЗнч(ФизЛицо) = Тип("Структура")	Тогда 
			Если ФизЛицо.Свойство("ФИО") Тогда  
				ФИО = ФизЛицо.ФИО;
			ИначеЕсли ФизЛицо.Свойство("Фамилия")	
				И ФизЛицо.Свойство("Имя")	
				И ФизЛицо.Свойство("Отчество") Тогда 	
				ФИО = СокрЛП(СтрШаблон("%1 %2 %3", ФизЛицо.Фамилия, ФизЛицо.Имя, ФизЛицо.Отчество));
			Иначе 
				ФИО = "";
			КонецЕсли;			
			Если ФизЛицо.Свойство("ИНН") Тогда  
				ИНН = ФизЛицо.ИНН;
			КонецЕсли;	
		ИначеЕсли ТипЗнч(ФизЛицо) = Тип("СправочникСсылка.Контрагенты") Тогда  
			ДанныеФизЛица				 	= ПолучитьДанныеФизЛица(ФизЛицо);
			Фамилия							= ДанныеФизЛица.Фамилия;
			Имя								= ДанныеФизЛица.Имя;
			Отчество						= ДанныеФизЛица.Отчество;
			ИНН 							= ДанныеФизЛица.ИНН;
			ФИО = СокрЛП(СтрШаблон("%1 %2 %3", Фамилия, Имя, Отчество));
		Иначе 
			ФИО = "";		
			ИНН = "";
		КонецЕсли;
		СтруктураПараметров.Вставить("ПроверитьПринадлежностьКПДЛ", Новый Структура("ФИО, ИНН", ФИО, ИНН));		
	КонецЕсли;
	
	Возврат СтруктураПараметров;
	
КонецФункции

Функция ПолучитьURIПространстваИменСервисаИспользуемогоWS()
	
	Возврат Контекст.URIПространстваИменСервиса[СтрШаблон("URIПространстваИменСервиса%1", Строка(Контекст.ИндексВызываемогоСервиса))];
	
КонецФункции

Функция ПолучитьТипWSПараметраПоИмени(Знач WSПрокси, Знач ИмяТипа)
	
	Попытка
		URIПространстваИмен = WSПрокси.ТочкаПодключения.Интерфейс.URIПространстваИмен;	
		ТипWS = WSПрокси.ФабрикаXDTO.Пакеты.Получить(URIПространстваИмен).Получить(ИмяТипа);
	Исключение
		ВызватьИсключение(СтрШаблон("Тип параметра с именем %1 не найден в пространства имен %2
									|Информация для технической поддержки:
									|%2", ИмяТипа, URIПространстваИмен, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
	КонецПопытки;
		
	Возврат ТипWS;
	
КонецФункции

Функция СоздатьПараметрСОднойПеременной(Знач WSПрокси, Знач ТипПараметра)
	
	Попытка
		Возврат WSПрокси.ФабрикаXDTO.Создать(ТипПараметра);
	Исключение
		ВызватьИсключение(СтрШаблон("Ошибка задания значения параметра типа %1
									|Информация для технической поддержки:
									|%2", ТипПараметра, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
	КонецПопытки;
	
КонецФункции	
	
Функция СоздатьПараметрСПолямиИмяПароль(Знач WSПрокси, Знач ТипПараметра1)
	
	WSПараметр = СоздатьПараметрСОднойПеременной(WSПрокси, ТипПараметра1);
	
	Попытка
		WSПараметр.Login 			= Контекст.ЛогинWS;
		WSПараметр.Password 		= Контекст.ПарольWS;
	Исключение
		ВызватьИсключение(СтрШаблон("Ошибка задания значения параметра типа %1
									|Информация для технической поддержки:
									|%2", ТипПараметра1, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
	КонецПопытки;

	Возврат WSПараметр;
	
КонецФункции

Функция ПолучитьСерияНомерПаспортаФизЛица(ФизЛицо) 
	
	Результат = "";
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДанныеДокументовРегистрацииСрезПоследних.Серия КАК Серия,
		|	ДанныеДокументовРегистрацииСрезПоследних.Номер КАК Номер
		|ИЗ
		|	РегистрСведений.ДанныеДокументовРегистрации.СрезПоследних КАК ДанныеДокументовРегистрацииСрезПоследних
		|ГДЕ
		|	ДанныеДокументовРегистрацииСрезПоследних.Клиент = &Клиент
		|	И ДанныеДокументовРегистрацииСрезПоследних.ТипДокумента = &ТипДокумента";
	
	Запрос.УстановитьПараметр("Клиент", ФизЛицо);
	Запрос.УстановитьПараметр("ТипДокумента", "Паспорт гражданина РФ");
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Результат = СтрШаблон("%1%2", СокрЛП(ВыборкаДетальныеЗаписи.Серия), СокрЛП(ВыборкаДетальныеЗаписи.Номер));
	КонецЦикла;
	
	Возврат Результат;	
	
КонецФункции

Функция ПолучитьДанныеФизЛица(ФизЛицо) Экспорт 
	
	Результат = Новый Структура("Фамилия, Имя, Отчество, ДатаРождения, ИНН", 
									"", "", "", '00010101', "");

	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СведенияИзКарточкиКлиентаСрезПоследних.Фамилия КАК Фамилия,
		|	СведенияИзКарточкиКлиентаСрезПоследних.Имя КАК Имя,
		|	СведенияИзКарточкиКлиентаСрезПоследних.Отчество КАК Отчество,
		|	СведенияИзКарточкиКлиентаСрезПоследних.ДатаРождения КАК ДатаРождения,
		|	СведенияИзКарточкиКлиентаСрезПоследних.ИНН КАК ИНН
		|ИЗ
		|	РегистрСведений.СведенияИзКарточкиКлиента.СрезПоследних КАК СведенияИзКарточкиКлиентаСрезПоследних
		|ГДЕ
		|	СведенияИзКарточкиКлиентаСрезПоследних.Клиент = &Клиент";
	
	Запрос.УстановитьПараметр("Клиент", ФизЛицо);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(Результат, ВыборкаДетальныеЗаписи);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции
			
Функция ПолучитьДанныеДокументаДляПолученияИНН(ФизЛицо) Экспорт 
			
	Результат = Новый Структура("Документ, Номер, ДатаВыдачи", "00", "", '00010101');
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДанныеДокументовРегистрацииСрезПоследних.Серия КАК Серия,
		|	ДанныеДокументовРегистрацииСрезПоследних.Номер КАК Номер,
		|	ДанныеДокументовРегистрацииСрезПоследних.ТипДокумента КАК ТипДокумента,
		|	ДанныеДокументовРегистрацииСрезПоследних.ДатаВыдачи КАК ДатаВыдачи
		|ИЗ
		|	РегистрСведений.ДанныеДокументовРегистрации.СрезПоследних КАК ДанныеДокументовРегистрацииСрезПоследних
		|ГДЕ
		|	ДанныеДокументовРегистрацииСрезПоследних.Клиент = &Клиент";
	
	Запрос.УстановитьПараметр("Клиент", ФизЛицо);	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если ВыборкаДетальныеЗаписи.ТипДокумента = "Паспорт гражданина РФ" Тогда 
			Результат.Вставить("Документ", "21");
		ИначеЕсли ВыборкаДетальныеЗаписи.ТипДокумента = "Свидетельство о рождении" Тогда 
			Результат.Вставить("Документ", "03");
		КонецЕсли;	
		Результат.Вставить("Номер", СтрШаблон("%1%2", СокрЛП(ВыборкаДетальныеЗаписи.Серия), СокрЛП(ВыборкаДетальныеЗаписи.Номер)));
		Результат.Вставить("ДатаВыдачи", ВыборкаДетальныеЗаписи.ДатаВыдачи);
	КонецЦикла;
	
	Возврат Результат;	
	
КонецФункции



#КонецОбласти 

#Область Логирование

Процедура СообщитьОбОшибке(Знач ТекстОшибки, Знач ФатальнаяОшибка)
							
	Попытка														
		//ОтправитьEmail(ТекстОшибки, "Ошибка API Скрин");
	Исключение
		ЗаписьЖурналаРегистрации("APIСкрин", УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));			
	КонецПопытки;
		
	Если ФатальнаяОшибка Тогда 
		ВызватьИсключение(ТекстОшибки);
	Иначе
		ЗаписьЖурналаРегистрации("APIСкрин", УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
